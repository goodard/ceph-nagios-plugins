#!/usr/bin/python

# Script checks usage per osd as well as status of OSD
#  Licensed under the Apache License, Version 2.0 (the "License");
#  you may not use this file except in compliance with the License.
#  You may obtain a copy of the License at
#
#      http://www.apache.org/licenses/LICENSE-2.0
#
#  Unless required by applicable law or agreed to in writing, software
#  distributed under the License is distributed on an "AS IS" BASIS,
#  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
#  See the License for the specific language governing permissions and
#  limitations under the License.
#

import json
import commands
import sys
import argparse

# nagios exit code
STATUS_OK = 0
STATUS_WARNING = 1
STATUS_ERROR = 2
STATUS_UNKNOWN = 3
CEPH_COMMAND = '/usr/bin/ceph'


def argsParser():
    parser = argparse.ArgumentParser(description="ceph osd df check")
    parser.add_argument('-w', '--warning', help='OSD warning percentage', default=80, type=int, required=False)
    parser.add_argument('-c', '--critical', help='OSD critical percentage', default=90, type=int, required=False)
    parser.add_argument('-e', '--exe', help='ceph executable [%s]' % CEPH_COMMAND)
    parser.add_argument('-C', '--conf', help='alternative ceph conf file')
    parser.add_argument('-m','--monaddress', help='ceph monitor address[:port]')
    parser.add_argument('-i','--id', help='ceph client id')
    parser.add_argument('-k','--keyring', help='ceph client keyring file')
    return parser.parse_args()

def build_command():
    global CEPH_COMMAND
    if args.exe:
        CEPH_COMMAND = args.exe
    ceph_cmd = CEPH_COMMAND
    if args.monaddress:
        ceph_cmd = "%s -m %s" % (ceph_cmd, args.monaddress)
    if args.conf:
        ceph_cmd = "%s -c %s" % (ceph_cmd, args.conf)
    if args.id:
        ceph_cmd = "%s --id %s" % (ceph_cmd, args.id)
    if args.keyring:
        ceph_cmd = "%s --keyring %s" % (ceph_cmd, args.keyring)
    return ceph_cmd

def get_osd_df(ceph_cmd):
    ceph_check = "%s osd df --format=json 2>/dev/null" % (ceph_cmd)
    df_json = commands.getoutput(ceph_check)
    df_json = df_json.replace("-nan", "0")
    try:
        df_data = json.loads(df_json)
    except:
        print "ERROR: Unable to parse ceph osd df data"
        sys.exit(STATUS_UNKNOWN)
    return df_data


def main():
    global args
    args = argsParser()
    size_warning = []
    size_crit = []
    data = get_osd_df(build_command())
    for item in data['nodes']:
        if item['utilization'] > args.warning and item['utilization'] <= args.crit:
            size_warning.append(item)
        elif item['utilization'] > args.critical:
            size_crit.append(item)
    #    print "OSD Name: %s has %f free" % (item['name'], item['utilization'])
    if size_crit:
        for osd in size_crit:
            print "CRITICAL: %s has usage of %f " % (osd['name'], osd['utilization'])
        return STATUS_ERROR

    if size_warning:
        for osd in size_warning:
            print "WARNING: %s has usage of %f " % (osd['name'], osd['utilization'])
        return STATUS_WARNING
    print "STATUS OK"
    return STATUS_OK


if __name__ == "__main__":
    sys.exit(main())
